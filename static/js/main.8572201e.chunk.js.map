{"version":3,"sources":["assets/jackie.jpg","assets/couch.jpg","assets/office1.jpg","components/navbar/index.js","components/about/index.js","components/contact/index.js","components/schedule/index.js","components/home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","selectView","this","props","className","onClick","Component","About","src","headshot","alt","couch","Contact","state","firstName","lastName","email","message","textChange","e","setState","target","name","value","onChange","onSubmit","Schedule","office","Home","view","year","Date","getFullYear","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,iBCA3CD,EAAOC,QAAU,IAA0B,qC,uPC6B5BC,G,uLAxBH,IACAC,EAAeC,KAAKC,MAApBF,WACR,OACE,yBAAKG,UAAU,UACb,4BACE,wBAAIC,QAAS,kBAAMJ,EAAW,WAA9B,SAGA,wBAAII,QAAS,kBAAMJ,EAAW,cAA9B,2BAGA,wBAAII,QAAS,kBAAMJ,EAAW,aAA9B,oB,GAZWK,c,yCC+BNC,E,iLA5BX,OACE,yBAAKH,UAAU,SACb,wCACA,uBAAGA,UAAU,SACX,yBAAKA,UAAU,WAAWI,IAAKC,IAAUC,IAAI,WAD/C,ogBASA,iDACA,uBAAGN,UAAU,SACX,yBAAKA,UAAU,UAAUI,IAAKG,IAAOD,IAAI,WAD3C,md,GAfYJ,a,QCgDLM,G,iNAjDXC,MAAQ,CACNC,UAAW,GACXC,SAAU,GACVC,MAAO,GACPC,QAAS,I,EAIXC,WAAa,SAACC,GAAD,OAAO,EAAKC,SAAL,eAAiBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,S,wEAE5D,OACE,yBAAKnB,UAAU,oBAAf,wXAOE,2BACEA,UAAU,QACVmB,MAAOrB,KAAKW,MAAMC,UAClBQ,KAAK,YACLE,SAAUtB,KAAKgB,aACjB,2BACEd,UAAU,QACVmB,MAAOrB,KAAKW,MAAME,SAClBO,KAAK,WACLE,SAAUtB,KAAKgB,aACjB,2BACEd,UAAU,QACVmB,MAAOrB,KAAKW,MAAMG,MAClBM,KAAK,QACLE,SAAUtB,KAAKgB,aACjB,8BACEd,UAAU,UACVkB,KAAK,UACLC,MAAOrB,KAAKW,MAAMI,QAClBO,SAAUtB,KAAKgB,aACjB,4BACEd,UAAU,MACVC,QAASH,KAAKuB,UAFhB,e,GAvCYnB,c,yBCiBPoB,E,iLAdX,OACE,yBAAKtB,UAAU,YACb,+DACA,yBAAKA,UAAU,UAAUI,IAAKmB,IAAQjB,IAAI,WAF5C,sLAME,0D,GATeJ,aCyBRsB,E,2MArBXf,MAAQ,CACNgB,KAAM,I,EAGR5B,WAAa,SAAC4B,GACZ,EAAKT,SAAS,CAAES,U,wEAER,IACAA,EAAS3B,KAAKW,MAAdgB,KACR,OACE,yBAAKzB,UAAU,QACb,kBAAC,EAAD,CAAQH,WAAYC,KAAKD,aACf,UAAT4B,EACC,kBAAC,EAAD,MAAqB,YAATA,EACV,kBAAC,EAAD,MAAuB,aAATA,EACZ,kBAAC,EAAD,MAAe,kBAAC,EAAD,W,GAhBZvB,aCHfwB,EAAO,IAAIC,KACfD,EAAOA,EAAKE,cAcGC,MAZf,WACE,OACE,yBAAK7B,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,YACZ,4DAEH,uDAA8B0B,EAA9B,6BCFcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8572201e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/jackie.ae545394.jpg\";","module.exports = __webpack_public_path__ + \"static/media/couch.6e2d46a7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/office1.99c4b06a.jpg\";","import React, { Component } from 'react'\nimport './navbar.css'\nimport PropTypes from 'prop-types'\n\nclass Navbar extends Component {\n  render() {\n    const { selectView } = this.props\n    return (\n      <div className=\"navbar\">\n        <ul>\n          <li onClick={() => selectView('about')}>\n                About\n          </li>\n          <li onClick={() => selectView('schedule')}>\n                Schedule an Appointment\n          </li>\n          <li onClick={() => selectView('contact')}>\n                Contact Me\n          </li>\n        </ul>\n      </div>\n    )\n  }\n}\n\nNavbar.propTypes = {\n  selectView: PropTypes.func\n}\n\nexport default Navbar","import React, { Component } from 'react'\nimport './about.css'\nimport headshot from '../../assets/jackie.jpg'\nimport couch from '../../assets/couch.jpg'\n\nclass About extends Component {\n  render() {\n    return (\n      <div className=\"about\">\n        <h2>About Me</h2>\n        <p className=\"blurb\">\n          <img className='headshot' src={headshot} alt='Jackie' />\n          {`I am a graduate of Cleveland State, a CACREP accredited university, and I \n        hold a Master's degree in education.  I've completed the Clinical Mental \n        Health counseling program and am a licensed professional counselor.  Clevelend \n        State's program included many self-growth exercises I swear by because, unless \n        I understand myself, I cannot possibly help you understand you.  I counsel in all \n        different issues across the spectrum, and I believe in getting to the root.`}\n        </p>\n        <h2>Mission Statement</h2>\n        <p className=\"blurb\">\n          <img className='heropic' src={couch} alt='office' />\n          {`It is my mission to take what I have learned and use it to help you \n          better understand yourself, help you grow in ways that are priceless.  Two \n          minds are better than one, and two hearts are better than one.  I plan on \n          being your partner in self-growth, in a loving, caring, challenging and \n          yet enjoyable and positive environment.  You already have all of your answers, \n          and I will help you find them.`}\n        </p>\n      </div>\n    )\n  }\n}\n\n\nexport default About","import React, { Component } from 'react'\nimport './contact.css'\n\nclass Contact extends Component {\n    state = {\n      firstName: '',\n      lastName: '',\n      email: '',\n      message: ''\n    }\n\n    // onSubmit = () => console.log('formspree hookup to come', this.state)\n    textChange = (e) => this.setState({ [e.target.name]: e.target.value })\n    render() {\n      return (\n        <div className=\"contactContainer\">\n          Contact me contact me contact me contact me contact me contact me \n          contact me contact me contact me contact me contact me contact me \n          contact me contact me contact me contact me contact me contact me \n          contact me contact me contact me contact me contact me contact me \n          contact me contact me contact me contact me contact me contact me \n          contact me contact me contact me contact me \n          <input \n            className='input'\n            value={this.state.firstName}\n            name='firstName'\n            onChange={this.textChange} />\n          <input \n            className='input'\n            value={this.state.lastName}\n            name='lastName'\n            onChange={this.textChange} />\n          <input \n            className='input'\n            value={this.state.email}\n            name='email'\n            onChange={this.textChange} />\n          <textarea\n            className='message'\n            name='message'\n            value={this.state.message}\n            onChange={this.textChange} />\n          <button\n            className='btn'\n            onClick={this.onSubmit}>\n                Submit\n          </button>\n        </div>\n      )\n    }\n}\n\n\nexport default Contact","import React, { Component } from 'react'\nimport './schedule.css'\nimport office from '../../assets/office1.jpg'\n\nclass Schedule extends Component {\n  render() {\n    return (\n      <div className=\"schedule\">\n        <h2>Schedule an Appointment With Me</h2>\n        <img className='heropic' src={office} alt='office' />\n        schedule blurb schedule blurb schedule blurb schedule blurb \n        schedule blurb schedule blurb schedule blurb schedule blurb \n        schedule blurb schedule blurb schedule blurb schedule blurb \n        <p>Calendly plug-in here?</p>\n      </div>\n    )\n  }\n}\n\n\nexport default Schedule","import React, { Component } from 'react'\nimport Navbar from './navbar'\nimport About from './about'\nimport Contact from './contact'\nimport Schedule from './schedule'\nimport '../App.css'\n\nclass Home extends Component {\n    state = {\n      view: ''\n    }\n\n    selectView = (view) => {\n      this.setState({ view })\n    }\n    render() {\n      const { view } = this.state\n      return (\n        <div className=\"home\">\n          <Navbar selectView={this.selectView} />\n          {view === 'about' ?\n            <About /> : view === 'contact' ?\n              <Contact /> : view === 'schedule' ?\n                <Schedule /> : <About />}\n        </div>\n      )\n    }\n}\n\nexport default Home","import React from 'react'\nimport './App.css'\nimport Home from './components/home'\n\nlet year = new Date()\nyear = year.getFullYear()\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n      <div className=\"quoteBox\">\n        {'Your journey is unfolding exactly the way it\\'s meant to.'}\n      </div>\n      <footer>Jackie Pavel &#9400; {year} | All rights reserved.</footer>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}